const mongoose = require('mongoose')
const Movie = require("./models/Movie")
const mongodb_URI = "mongodb+srv://Jalon:a@cluster0.xsiln.mongodb.net/test"

run()
async function run () {
    
    

   // console.log(cur)
}
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() { console.log("we are connected!!!") });

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path"); // to refer to local paths

const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server");
const layouts = require("express-ejs-layouts");


// *********************************************************** //
//  Loading JSON datasets
// *********************************************************** //
const movies = require('./top-rated-movies-01.json')

mongoose.connect(mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true });

// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
// app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
    session({
        secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
        resave: false,
        saveUninitialized: false
    })
);

// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", async (req, res, next) => {
    let movYear = '2002'; // get the user's id
    let t = Names.findOne({year: "2002"})
    let movie = await Movie.findOne({ year: movYear }); // lookup the user's todo items
    res.locals.movie = movie; //make the items available in the view
    console.log("This " + t.count())
    try {
        const m = await Movie.find({year: "2002"})
        
    res.render("index");
    } catch (error) {
        next(error)
    }
    
});


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "7000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;


app.get('/upsertDB',
    async(req, res, next) => {
        //await Course.deleteMany({})
        for (m in movies) {
            // console.log(m.title)
            const { title, year, genres, rating, poster } = movies;
            // console.log("Upsert " + m)
            await Movie.findOneAndUpdate({ title, year, genres, rating, poster  }, m, { upsert: true })
        }
        const num = await Movie.find({}).count();
        res.send("data uploaded: " + num)
    }
)